<%- include('partials/header') -%>



    <h1 class="text-center">Geräte</h1>

    <br>

    <table class="table">
        <thead>
            <tr>
                <th scope="col" class="d-none d-xl-table-cell text-center">Key</th>
                <th scope="col" class="d-none d-xl-table-cell text-center">Name</th>
                <th scope="col" class="d-none d-xl-table-cell"></th>
            </tr>
        </thead>
        <tbody id="output_tbl">
        </tbody>
    </table>

    <div class="d-flex justify-content-center">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button type="button" class="btn btn-outline-dark d-block mx-auto" id='add-key'>Hinzufügen</button>
            <button type="button" class="btn btn-outline-dark d-block mx-auto" id='refresh-key'>
                <i class="fas fa-sync-alt"></i>
            </button>
        </div>
    </div>

    <script>

        function update() {
            const container = document.getElementById('output_tbl');
            let output = "";
            fetch('/api/key', { method: 'GET' })
                .then(res => res.json())
                .then(data => get_req = data)
                .then(() => {
                    console.log(get_req);
                    get_req.forEach((data, index) => {
                        output
                            += "<tr> <th scope='col' class='d-none d-xl-table-cell text-center api-key'>" + data[1] + "</th> <th scope='col'> <div class='input-group align-items-center justify-content-center flex-nowrap'> <div class='form-outline float-start'> <input type='text' class='form-control input-name placeholder-active' value=" + data[0] + "> <div class='form-notch'> <div class='form-notch-leading' style='width: 9px;'></div> <div class='form-notch-middle' style='width: 0px;'></div> <div class='form-notch-trailing'></div> </div> </div> <button type='button' class='btn btn-outline-dark d-table-cell d-xl-none copy-key'> <i class='fas fa-copy'></i> </button> <button type='button' class='btn btn-outline-dark d-table-cell d-xl-none del-key'> <i class='fas fa-trash'></i> </button> </div> </th> <th class='d-none d-xl-table-cell'> <button type='button' class='btn btn-outline-dark copy-key'> <i class='fas fa-copy'></i> </button> <button type='button' class='btn btn-outline-dark del-key'> <i class='fas fa-trash'></i> </button> </th></tr>";
                    });
                    container.innerHTML = output;
                    listeners();
                    progress(0);
                })
                .catch(function (error) {
                    console.log(error);
                })
        }
        update();

        function index_calc(arg) {
            if (arg % 2 != 0) { arg = (arg / 2) - 0.5; }
            else { arg = (arg / 2); }

            return arg;
        }

        function listeners() {
            document.querySelectorAll('.input-name').forEach((item, index) => {
                item.addEventListener('blur', event => {
                    progress(1);
                    input_name = document.querySelectorAll('.input-name')[index].value;
                    fetch('/api/key?id=' + index + '&value=' + input_name, { method: 'PATCH' });
                    progress(0);
                })
            })

            document.querySelectorAll('.del-key').forEach((item, index) => {
                item.addEventListener('click', event => {
                    progress(1);
                    fetch('/api/key?id=' + (index_calc(index)), { method: 'DELETE' })
                        .then(function (response) {
                            /* location.reload(); */
                            update();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                })
            })

            document.querySelectorAll('.copy-key').forEach((item, index) => {
                item.addEventListener('click', event => {
                    api_key = document.querySelectorAll('.api-key')[index_calc(index)].innerText.trim();
                    navigator.clipboard.writeText(api_key);
                    alert("API key kopiert:\n\n" + api_key.substr(0, 40) + "...");
                })
            })
        }

        document.getElementById('add-key').addEventListener('click', () => {
            progress(1);
            fetch('/api/key', { method: 'POST' })
                .then(function (response) {
                    /* location.reload(); */
                    console.log("ran");
                    update();
                })
                .catch(function (error) {
                    console.log(error);
                });
        });

        document.getElementById('refresh-key').addEventListener('click', () => {
            progress(1);
            update();
        });

        function progress(status) {
            if (status == 1) {
                Loader.open();
            } else {
                Loader.close();
            }
        }

        /* loading feedback!!! */

    </script>

    <script>
        /* Loader */
        /* https://www.cssscript.com/animated-svg-loading-spinner/ */
        var Loader = {
            loader: null,
            body: null,
            html: '<span><svg width="40" height="40" version="1.1" xmlns="http://www.w3.org/2000/svg"><circle cx="20" cy="20" r="15"></svg></span>',
            cssClass: 'loader',
            check: function () {
                if (this.body == null) {
                    this.body = document.getElementsByTagName('body')[0];
                }
            },
            open: function () {
                this.check();
                if (!this.isOpen()) {
                    this.loader = document.createElement('div');
                    this.loader.setAttribute('id', 'loader');
                    this.loader.classList.add('loader_website');
                    this.loader.innerHTML = this.html;
                    this.body.append(this.loader);
                    this.body.classList.add(this.cssClass);
                }
                return this;
            },
            close: function () {
                this.check();
                if (this.isOpen()) {
                    this.body.classList.remove(this.cssClass);
                    this.loader.remove();
                }
                return this;
            },
            isOpen: function () {
                this.check();
                return this.body.classList.contains(this.cssClass);
            },
            ifOpened: function (callback, close) {
                this.check();
                if (this.isOpen()) {
                    if (!!close)
                        this.close();
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
                return this;
            },
            ifClosed: function (callback, open) {
                this.check();
                if (!this.isOpen()) {
                    if (!!open)
                        this.open();
                    if (typeof callback === 'function') {
                        callback();
                    }
                }
                return this;
            }
        };
    /* Loader */
    </script>

    <style>
        /*loader_website*/
        .loader_website {
            position: fixed;
            top: 0;
            left: 0px;
            z-index: 1100;
            width: 100%;
            height: 100%;
            display: block;
        }

        .loader_website>span {
            position: absolute;
            right: 10px;
            top: 10px;

            display: block;
            width: 48px;
            height: 48px;
            padding: 4px;

            border-radius: 100%;

            background-color: #262626;
            box-shadow: rgba(0, 0, 0, 0.07) 0px 20px 25px -5px, rgba(0, 0, 0, 0.05) 0px 10px 10px -5px;
        }

        .loader_website>span>svg {
            fill: transparent;
            stroke: #fff;
            stroke-width: 3;
            animation: loader_dash 2s ease infinite, loader_rotate 2s linear infinite;
        }

        @keyframes loader_dash {
            0% {
                stroke-dasharray: 1, 95;
                stroke-dashoffset: 0;
            }

            50% {
                stroke-dasharray: 85, 95;
                stroke-dashoffset: -25;
            }

            100% {
                stroke-dasharray: 85, 95;
                stroke-dashoffset: -93;
            }
        }

        @keyframes loader_rotate {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>

    <style>
        .btn {
            min-width: 59px;
        }
    </style>

    <%- include('partials/footer') -%>