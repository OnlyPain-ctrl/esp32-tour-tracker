/*

* _dv = devices

*/

function init_dv() {
    update_dv();

    document.getElementById('add-key').addEventListener('click', () => {
        progress(1);
        fetch('/api/key', { method: 'POST' })
            .then(function (response) {
                update_dv();
            })
            .catch(function (error) {
                console.log(error);
            });
    });
}

function timer_dv() {
    update_dv();
}

function update_dv() {
    const container = document.getElementById('output_tbl');
    let output = "";
    fetch('/api/key', { method: 'GET' })
        .then(res => res.json())
        .then(data => get_req = data)
        .then(() => {
            get_req.forEach((data, index) => {
                output +=
                    `<tr>
                        <th scope="col" class="d-none d-xl-table-cell text-center api-key">
                            <div class="form-outline"> <input class="form-control active" type="text" value="` + data.key + `"
                                    aria-label="readonly api key" readonly="" disabled>
                                <div style="position:absolute; left:0; right:0; top:0; bottom:0;"></div> <label class="form-label"
                                    style="margin-left: 0px;">Readonly</label>
                                <div class="form-notch">
                                    <div class="form-notch-leading" style="width: 9px;"></div>
                                    <div class="form-notch-middle" style="width: 55px;"></div>
                                    <div class="form-notch-trailing"></div>
                                </div>
                            </div>
                        </th>
                        <th scope="col">
                            <div class="input-group align-items-center justify-content-center flex-nowrap">
                                <div class="form-outline float-start"> <input type="text" class="form-control input-name placeholder-active"
                                        value="` + data.name + `">
                                    <div class="form-notch">
                                        <div class="form-notch-leading" style="width: 9px;"></div>
                                        <div class="form-notch-middle" style="width: 0px;"></div>
                                        <div class="form-notch-trailing"></div>
                                    </div>
                                </div> <button type="button" class="btn btn-outline-dark d-table-cell d-xl-none copy-key"> <i
                                        class="fas fa-copy"></i> </button> <button type="button"
                                    class="btn btn-outline-dark d-table-cell d-xl-none del-key"> <i class="fas fa-trash"></i> </button>
                            </div>
                        </th>
                        <th class="d-none d-xl-table-cell"> <button type="button" class="btn btn-outline-dark copy-key"> <i
                                    class="fas fa-copy"></i> </button> <button type="button" class="btn btn-outline-dark del-key"> <i
                                    class="fas fa-trash"></i> </button> </th>
                    </tr>`;
            });
            container.innerHTML = output;
            listeners_dv();
            progress(0);
        })
        .catch(function (error) {
            console.log(error);
        });
}

function index_calc_dv(arg) {
    if (arg % 2 != 0) { arg = (arg / 2) - 0.5; }
    else { arg = (arg / 2); }

    return arg;
}

function listeners_dv() {
    document.querySelectorAll('.api-key > div').forEach((item, index) => {
        api_key = document.querySelectorAll('.api-key input')[index_calc_dv(index)].value.trim();
        item.addEventListener('click', event => {
            navigator.clipboard.writeText(api_key);
            Swal.fire({
                title: 'API key kopiert:',
                text: api_key.substr(0, 40) + "...",
                icon: 'success',
                customClass: {
                    confirmButton: 'btn btn-outline-dark m-2'
                },
                buttonsStyling: false,
            });
        });
    });

    document.querySelectorAll('.input-name').forEach((item, index) => {
        item.addEventListener('blur', event => {
            progress(1);
            input_name = document.querySelectorAll('.input-name')[index].value;
            fetch('/api/key?id=' + index + '&value=' + input_name, { method: 'PATCH' })
                .then(function (response) {
                    progress(0);
                });
        });
    });

    document.querySelectorAll('.del-key').forEach((item, index) => {
        item.addEventListener('click', event => {
            Swal.fire({
                title: 'Sind Sie sich sicher?',
                text: "Sie können dies nicht rückgängig machen!",
                icon: 'warning',
                showCancelButton: true,
                customClass: {
                    confirmButton: 'btn btn-danger m-2',
                    cancelButton: 'btn btn-outline-dark m-2'
                },
                buttonsStyling: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'Abbrechen',
                confirmButtonText: 'Löschen'
            }).then((result) => {
                if (result.isConfirmed) {
                    progress(1);
                    fetch('/api/key?id=' + (index_calc_dv(index)), { method: 'DELETE' })
                        .then(function (response) {
                            update_dv();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }
            });
        });
    });

    document.querySelectorAll('.copy-key').forEach((item, index) => {
        item.addEventListener('click', event => {
            api_key = document.querySelectorAll('.api-key input')[index_calc_dv(index)].value.trim();
            navigator.clipboard.writeText(api_key);
            Swal.fire({
                title: 'API key kopiert:',
                text: api_key.substr(0, 40) + "...",
                icon: 'success',
                customClass: {
                    confirmButton: 'btn btn-outline-dark m-2'
                },
                buttonsStyling: false,
            });
        });
    });
}

if (window.location.href.indexOf("/devices") != -1) {
    init_dv();
    setInterval(() => { timer_dv(); }, 30000);
}

/*

* _fi = files

TODO: export / download button

*/

function update_fi() {
    const container = document.getElementById('accordionFiles');
    let output = "";
    fetch('/api/tours', { method: 'GET' })
        .then(res => res.json())
        .then(data => get_req = data)
        .then(() => {
            get_req.forEach((data, index) => {
                output +=
                    `<div class="accordion-item">
                        <h2 class="accordion-header d-flex justify-content-center align-items-center" id="heading_` + index + `">

                            <button type="button" class="btn btn-dark ms-3 p-1 rn-name-btn"
                                style="min-width: 25px; min-height: 25px;">
                                <i class="fas fa-pen"></i>
                            </button>
                            <button class="accordion-button collapsed flex-grow-1 accordion-btn text-dark" type="button" data-mdb-toggle="collapse"
                                data-mdb-target="#collapse_` + index + `" aria-expanded="false" aria-controls="collapse_` + index + `"
                                style="box-shadow: none;">
                                ` + data.name + " <span class='ms-4 font-monospace text-black-50 d-none d-md-inline'>[" + data.file + "]</span> " + `
                            </button>

                        </h2>
                        <div id="collapse_` + index + `" class="accordion-collapse collapse" aria-labelledby="heading_` + index + `"
                            data-mdb-parent="#accordionFiles">
                            <div class="accordion-body pt-1">

                                <div class="container-fluid">
                                    <div class="row">

                                        <div class="col-md-3 col-6 pb-4 pb-md-0">
                                            <div class="card">
                                                <div class="card-body p-3">
                                                    <h5 class="card-title text-center">°C</h5>
                                                    <div class="container-fluid m-0 p-0">
                                                        <div class="row">
                                                            <div class="col text-end p-0 px-1">
                                                                Max: <br>
                                                                Min: <br>
                                                                Avg: <br>
                                                            </div>
                                                            <div class="col p-0 px-1 temp_info">
                                                                <span class="badge bg-dark rounded-pill">-</span> <br>
                                                                <span class="badge bg-dark rounded-pill">-</span> <br>
                                                                <span class="badge bg-dark rounded-pill">-</span> <br>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-3 col-6 pb-4 pb-md-0">
                                            <div class="card">
                                                <div class="card-body p-3">
                                                    <h5 class="card-title text-center">Km/h</h5>
                                                    <div class="container-fluid m-0 p-0">
                                                        <div class="row">
                                                            <div class="col text-end p-0 px-1">
                                                                Max: <br>
                                                                Min: <br>
                                                                Avg: <br>
                                                            </div>
                                                            <div class="col p-0 px-1 speed_info">
                                                                <span class="badge bg-dark rounded-pill">-</span> <br>
                                                                <span class="badge bg-dark rounded-pill">-</span> <br>
                                                                <span class="badge bg-dark rounded-pill">-</span> <br>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-1"> </div>

                                        <div class="col-md-4 pb-4 pb-md-0">
                                            <div class="form-outline">
                                                <textarea class="form-control textarea-notes active shadow-3" id="textArea_` + index + `" rows="5"
                                                maxlength="100" style="resize: none;">` + data.notes + `</textarea>
                                                <label class="form-label" for="textArea_` + index + `"
                                                    style="margin-left: 0px;">Notizen</label>
                                                <div class="form-notch">
                                                    <div class="form-notch-leading" style="width: 9px;"></div>
                                                    <div class="form-notch-middle" style="width: 52px;"></div>
                                                    <div class="form-notch-trailing"></div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-md-1">
                                            <button type="button" class="btn btn-dark mb-2 p-0 open-element-btn float-md-none float-end ms-2 ms-md-0"
                                                style="min-width: 30px; min-height: 40px;">
                                                <i class="fas fa-external-link-alt"></i>
                                            </button>
                                            <button type="button" class="btn btn-dark mb-2 p-0 del-element-btn float-md-none float-end ms-2 ms-md-0"
                                                style="min-width: 30px; min-height: 40px;">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                            <button disabled type="button" class="btn btn-dark mb-2 p-0 download-element-btn float-md-none float-end ms-2 ms-md-0"
                                                style="min-width: 30px; min-height: 40px;">
                                                <i class="fas fa-download"></i>
                                            </button>
                                        </div>

                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>`;
            });
            container.innerHTML = output;
            listeners_fi(get_req);
            progress(0);
        })
        .catch(function (error) {
            console.log(error);
        });
}

function listeners_fi(data_array) {
    document.querySelectorAll('.rn-name-btn').forEach((item, index) => {
        item.addEventListener('click', event => {

            /* close open accordion by simulating button click */
            document.querySelectorAll('.accordion-btn').forEach((item) => {
                if (!item.classList.contains("collapsed")) {
                    item.click();
                }
            });

            Swal.fire({
                title: 'Namensänderung',
                input: 'text',
                inputLabel: 'Bitte geben sie ihren gewünschten Namen ein.',
                showCancelButton: true,
                customClass: {
                    confirmButton: 'btn btn-danger m-2',
                    cancelButton: 'btn btn-outline-dark m-2'
                },
                buttonsStyling: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'Abbrechen',
                confirmButtonText: 'Ändern',
                inputValidator: (value) => {
                    if (!value) {
                        return 'Name kann nicht leer sein!';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    progress(1);
                    fetch('/api/tours?id=' + index + "&name=" + result.value, { method: 'PATCH' })
                        .then(function (response) {
                            update_fi();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }
            });
        });
    });

    document.querySelectorAll('.accordion-btn').forEach((item, index) => {
        const speed_info_container = document.querySelectorAll('.speed_info')[index].querySelectorAll('span');
        const temp_info_container = document.querySelectorAll('.temp_info')[index].querySelectorAll('span');

        item.addEventListener('click', event => {
            if (speed_info_container[0].innerHTML == "-") {
                loading_animation.on();
                fetch('/api/tours?file=' + data_array[index].file, { method: 'GET' })
                    .then(res => res.json())
                    .then(data => get_req = data)
                    .then(function (response) {
                        speed_info_container.forEach((item, index) => {
                            item.innerHTML = get_req[index];
                        });
                        temp_info_container.forEach((item, index) => {
                            item.innerHTML = get_req[index + 3];
                        });
                        loading_animation.off();
                    });
            }
        });
    });

    document.querySelectorAll('.open-element-btn').forEach((item, index) => {
        item.addEventListener('click', event => {
            window.open("/view/" + data_array[index].file, "_blank");
        });
    });

    document.querySelectorAll('.del-element-btn').forEach((item, index) => {
        item.addEventListener('click', event => {

            Swal.fire({
                title: 'Sind Sie sich sicher?',
                text: "Sie können dies nicht rückgängig machen!",
                icon: 'warning',
                showCancelButton: true,
                customClass: {
                    confirmButton: 'btn btn-danger m-2',
                    cancelButton: 'btn btn-outline-dark m-2'
                },
                buttonsStyling: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'Abbrechen',
                confirmButtonText: 'Löschen'
            }).then((result) => {
                if (result.isConfirmed) {
                    progress(1);
                    fetch('/api/tours?id=' + index, { method: 'DELETE' })
                        .then(function (response) {
                            update_fi();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }
            });
        });
    });

    document.querySelectorAll('.textarea-notes').forEach((item, index) => {
        item.addEventListener('blur', event => {
            fetch('/api/tours?id=' + index + "&notes=" + item.value.replace(/\n/g, "%0A"), { method: 'PATCH' })
                .then(function (response) {
                })
                .catch(function (error) {
                    console.log(error);
                });
        });
    });

    document.querySelectorAll('.download-element-btn').forEach((item, index) => {
        item.addEventListener('click', event => {
            console.log("download at: " + index);
            /* TODO */
        });
    });

}

if (window.location.href.indexOf("/files") != -1) {
    update_fi();
}

/*

* inspiration => https://www.cssscript.com/animated-svg-loading-spinner/

*/

const click_block = {
    container: null,
    body: null,
    cssClass: 'click_block',
    check: function () {
        if (this.body == null) {
            this.body = document.getElementsByTagName('body')[0];
        }
    },
    open: function () {
        this.check();
        if (!this.isOpen()) {
            this.container = document.createElement('div');
            this.container.setAttribute('id', 'click_block');
            this.body.append(this.container);
            this.body.classList.add(this.cssClass);
        }
        return this;
    },
    close: function () {
        this.check();
        if (this.isOpen()) {
            this.body.classList.remove(this.cssClass);
            this.container.remove();
        }
        return this;
    },
    isOpen: function () {
        this.check();
        return this.body.classList.contains(this.cssClass);
    }
};

const loading_animation = {
    container: document.getElementById("loading"),
    on: function () {
        this.container.style.opacity = "1";
    },
    off: function () {
        this.container.style.opacity = "0";
    }
};

function progress(status) {
    if (status == 1) {
        click_block.open();
        loading_animation.on();
    } else {
        click_block.close();
        loading_animation.off();
    }
}
/*

* set max => infoChart.options.scales.y.max = 20;
* colors for graphs
    #003f5c
    #2f4b7c
    #665191
    #a05195
    #d45087
    #f95d6a
    #ff7c43
    #ffa600
* color for map
    fade => 'blue', 'yellow', 'red'

? multible axes
TODO: better way to display forces
TODO: mobile view

*/

function initMap() {
    const f = chroma.scale(['blue', 'yellow', 'red']);

    const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 18,
        center: new google.maps.LatLng(data_array[1][8], data_array[1][9]),
        mapTypeId: "terrain",
    });

    let max = 0;

    for (i = 1; i < data_array.length - 2; i++) {
        if (max < data_array[i][11]) {
            max = data_array[i][11];
        }
    }

    for (i = 1; i < data_array.length - 2; i++) {
        let pos1 = new google.maps.LatLng(data_array[i][8], data_array[i][9]);
        let pos2 = new google.maps.LatLng(data_array[i + 1][8], data_array[i + 1][9]);

        var check_speed = [10, 50, 100];
        var current_speed = data_array[i][11];

        polyline = new google.maps.Polyline({
            path: [pos1, pos2],
            geodesic: true,
            strokeColor: f(current_speed / max).toString(),
            strokeOpacity: 1.0,
            strokeWeight: 2,
            map: map
        });
    }

    /* bad performence */
    /* for (i = 1; i < data_array.length; i++) {
        marker = new google.maps.Marker({
            position: new google.maps.LatLng(data_array[i][8], data_array[i][9]),
            map: map,
            icon: {
                path: google.maps.SymbolPath.CIRCLE,
                fillColor: '#996699',
                fillOpacity: 0.5,
                strokeWeight: 0,
                scale: 7
            },
            title: 'kmh: ' + data_array[i][11] + '; alt: ' + data_array[i][10]
        })
    } */
    const ctx1 = document.getElementById('infoChart').getContext('2d');
    const infoChart = new Chart(ctx1, {
        type: 'line',
        responsive: true,
        data: {
            labels: [],
            datasets: [{
                label: 'km/h',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#58508d'
                ],
                pointStyle: 'line',
            },
            {
                label: 'C',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#ff6361'
                ],
                pointStyle: 'line'
            },
            {
                label: 'H',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#ffa600'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    suggestedMax: 50
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const ctx2 = document.getElementById('accChart').getContext('2d');
    const accChart = new Chart(ctx2, {
        type: 'line',
        responsive: true,
        data: {
            labels: [],
            datasets: [{
                label: 'x',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#003f5c'
                ],
                pointStyle: 'line'
            },
            {
                label: 'y',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#58508d'
                ],
                pointStyle: 'line'
            },
            {
                label: 'z',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#bc5090'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const ctx3 = document.getElementById('rotChart').getContext('2d');
    const rotChart = new Chart(ctx3, {
        type: 'line',
        responsive: true,
        data: {
            labels: [],
            datasets: [{
                label: 'x',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#003f5c'
                ],
                pointStyle: 'line'
            },
            {
                label: 'y',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#58508d'
                ],
                pointStyle: 'line'
            },
            {
                label: 'z',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#bc5090'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    /* --- */

    const setChart = new Chart(document.getElementById('setChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Geschwindigkeit',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#f95d6a'
                ],
                pointStyle: 'line'
            },],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const rxChart = new Chart(document.getElementById('rxChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Rotation X',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#003f5c'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const ryChart = new Chart(document.getElementById('ryChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Rotation Y',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#58508d'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const rzChart = new Chart(document.getElementById('rzChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Rotation Z',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#bc5090'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const fxChart = new Chart(document.getElementById('fxChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Achse X',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#003f5c'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const fyChart = new Chart(document.getElementById('fyChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Achse Y',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#58508d'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    const fzChart = new Chart(document.getElementById('fzChart').getContext('2d'), {
        type: 'line',
        responsive: true,
        maintainAspectRatio: false,
        data: {
            labels: [],
            datasets: [{
                label: 'Achse Z',
                data: [],
                borderWidth: 1,
                borderColor: [
                    '#bc5090'
                ],
                pointStyle: 'line'
            }],
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                }
            },
            elements: {
                point: {
                    radius: 0
                }
            }
        }
    });

    for (let i = 1; i < data_array.length - 2; i++) {
        setChart.data.labels[i] = data_array[i][7].substring(0, 5);
        setChart.data.datasets[0].data[i] = data_array[i][11];

        infoChart.data.labels[i] = data_array[i][7].substring(0, 5);
        infoChart.data.datasets[0].data[i] = data_array[i][11];
        infoChart.data.datasets[1].data[i] = data_array[i][6];
        infoChart.data.datasets[2].data[i] = data_array[i][10];

        accChart.data.labels[i] = data_array[i][7].substring(0, 5);
        accChart.data.datasets[0].data[i] = data_array[i][0];
        accChart.data.datasets[1].data[i] = data_array[i][1];
        accChart.data.datasets[2].data[i] = data_array[i][2];

        rotChart.data.labels[i] = data_array[i][7].substring(0, 5);
        rotChart.data.datasets[0].data[i] = data_array[i][3];
        rotChart.data.datasets[1].data[i] = data_array[i][4];
        rotChart.data.datasets[2].data[i] = data_array[i][5];
    }
    setChart.update();

    infoChart.update();
    accChart.update();
    rotChart.update();

    function set(min, max) {

        let temp;

        if (min > max) {
            temp = min;
            min = max;
            max = temp;
        }

        rxChart.options.scales.x.min = min;
        rxChart.options.scales.x.max = max;

        ryChart.options.scales.x.min = min;
        ryChart.options.scales.x.max = max;

        rzChart.options.scales.x.min = min;
        rzChart.options.scales.x.max = max;

        fxChart.options.scales.x.min = min;
        fxChart.options.scales.x.max = max;

        fyChart.options.scales.x.min = min;
        fyChart.options.scales.x.max = max;

        fzChart.options.scales.x.min = min;
        fzChart.options.scales.x.max = max;

        /* rxChart.data.labels.pop(); */
        /* rxChart.data.datasets[0].data.pop(); */
        for (let i = 1; i < data_array.length - 2; i++) {
            rxChart.data.datasets[0].data.pop();
            rxChart.data.labels.pop();

            ryChart.data.datasets[0].data.pop();
            ryChart.data.labels.pop();

            rzChart.data.datasets[0].data.pop();
            rzChart.data.labels.pop();

            fxChart.data.datasets[0].data.pop();
            fxChart.data.labels.pop();

            fyChart.data.datasets[0].data.pop();
            fyChart.data.labels.pop();

            fzChart.data.datasets[0].data.pop();
            fzChart.data.labels.pop();
        }

        /* rxChart.options.scale.y.tricks.stepSize = 20; */
        for (let i = min; i < max; i++) {
            rxChart.data.labels[i] = data_array[i][7].substring(0, 5);
            rxChart.data.datasets[0].data[i] = data_array[i][3];

            ryChart.data.labels[i] = data_array[i][7].substring(0, 5);
            ryChart.data.datasets[0].data[i] = data_array[i][4];

            rzChart.data.labels[i] = data_array[i][7].substring(0, 5);
            rzChart.data.datasets[0].data[i] = data_array[i][5];


            fxChart.data.labels[i] = data_array[i][7].substring(0, 5);
            fxChart.data.datasets[0].data[i] = data_array[i][0];

            fyChart.data.labels[i] = data_array[i][7].substring(0, 5);
            fyChart.data.datasets[0].data[i] = data_array[i][1];

            fzChart.data.labels[i] = data_array[i][7].substring(0, 5);
            fzChart.data.datasets[0].data[i] = data_array[i][2];
        }
        rxChart.update('none');
        ryChart.update('none');
        rzChart.update('none');

        fxChart.update('none');
        fyChart.update('none');
        fzChart.update('none');
    }

    /* document.getElementById("lb-open").addEventListener('click', () => {
        var e = document.getElementById("lb-container");
        if (e.style.visibility == 'visible') {
            e.style.visibility = 'hidden';
            e.style.opacity = '0';
        }
        else {
            e.style.visibility = 'visible';
            e.style.opacity = '1';
        }
    }); */

    document.querySelectorAll('.lb-open').forEach((open, index) => {
        const container = document.querySelectorAll('.lb-container')[index];
        const close = document.querySelectorAll('.lb-close')[index];
        const tooltips = document.querySelectorAll('[data-mdb-toggle="tooltip"]');
        open.addEventListener('click', event => {
            container.style.visibility = 'visible';
            container.style.opacity = '1';
            tooltips.forEach((tooltip) => {
                const instance = mdb.Tooltip.getInstance(tooltip);
                instance.hide();
            });
        });

        close.addEventListener('click', event => {
            container.style.visibility = 'hidden';
            container.style.opacity = '0';
        });
    });

    document.addEventListener('keydown', function (event) {
        if (event.key === "Escape") {
            document.querySelectorAll('.lb-container').forEach((item, index) => {
                item.style.visibility = 'hidden';
                item.style.opacity = '0';
            });
        }
    });

    var canvas = document.getElementById('setChart');
    var overlay = document.getElementById('overlay');
    var chart = setChart;
    console.log(overlay);
    var startIndex = 0;
    overlay.width = canvas.width;
    overlay.height = canvas.height;
    var selectionContext = overlay.getContext('2d');
    var selectionRect = {
        w: 0,
        startX: 0,
        startY: 0
    };
    var drag = false;
    console.log(canvas);
    canvas.addEventListener('pointerdown', evt => {
        const points = chart.getElementsAtEventForMode(evt, 'index', {
            intersect: false
        });
        console.log(points[0].index);
        //(evt, 'nearest', { intersect: true }, true)
        startIndex = points[0].index;
        const rect = canvas.getBoundingClientRect();
        selectionRect.startX = evt.clientX - rect.left;
        selectionRect.startY = chart.chartArea.top;
        drag = true;
        // save points[0]._index for filtering
    });
    canvas.addEventListener('pointermove', evt => {

        const rect = canvas.getBoundingClientRect();
        if (drag) {
            const rect = canvas.getBoundingClientRect();
            selectionRect.w = (evt.clientX - rect.left) - selectionRect.startX;
            selectionContext.globalAlpha = 0.5;
            selectionContext.clearRect(0, 0, canvas.width, canvas.height);
            selectionContext.fillRect(selectionRect.startX,
                selectionRect.startY,
                selectionRect.w,
                chart.chartArea.bottom - chart.chartArea.top);
        } else {
            selectionContext.clearRect(0, 0, canvas.width, canvas.height);
            var x = evt.clientX - rect.left;
            if (x > chart.chartArea.left) {
                selectionContext.fillRect(x,
                    chart.chartArea.top,
                    1,
                    chart.chartArea.bottom - chart.chartArea.top);
            }
        }
    });
    canvas.addEventListener('pointerup', evt => {
        const points = chart.getElementsAtEventForMode(evt, 'index', {
            intersect: false
        });
        drag = false;
        console.log('implement filter between ' + setChart.data.labels[startIndex] + ' and ' + setChart.data.labels[points[0].index]);
        set(startIndex, points[0].index);
        /* https://github.com/chartjs/chartjs-plugin-annotation */
    });
}
